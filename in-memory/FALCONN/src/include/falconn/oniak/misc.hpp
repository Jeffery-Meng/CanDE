#ifndef __ONIAK_MISC_HPP__
#define __ONIAK_MISC_HPP__

#include <cmath>
#include <vector>
#include "../fastexp.hpp"

namespace ONIAK {
inline double final_prob(const std::vector<double>& recalls) {
  double result = 1.0;
  for (auto val : recalls) {
    result *= 1 - val;
  }
  return 1 - result;
}

inline double geometric_avg(const std::vector<double>& vals) {
  double result = 0.0;
  for (auto val : vals) {
    result += std::log(val);
  }
  return std::exp(result / vals.size());
}

template <typename Bitmap>
double bitmap_estimator(const Bitmap& bm) {
  double sz = bm.size(), ct = bm.count();
  return sz * std::log(sz / (sz - ct));
}

inline double kde(double distance, double gamma) {
  return std::exp(-distance * distance / gamma / gamma / 2.0);
};

// we try to avoid squaring gamma every time.
inline float kdev2(float distance, float gamma) {
  return fastExp(-distance * distance / gamma);
};

// The following codes are generated by Github copilot.
// ignore very small values in gt
template<typename T, typename T2>
double mre(const std::vector<T>& val, const std::vector<T2>& gt, double tau=1e-3) {
  double result = 0.0;
  assert(val.size() == gt.size());
  int cnt = 0;
  for (size_t i = 0; i < val.size(); ++i) {
    if (std::abs(gt[i]) > tau) {
      result += std::abs(val[i] - gt[i]) / std::abs(gt[i]);
      cnt++;
    }
  }
  return result / cnt;
}

template<typename T, typename T2>
double mae(const std::vector<T>& val, const std::vector<T2>& gt) {
  assert(val.size() == gt.size());
  double result = 0.0;
  for (size_t i = 0; i < val.size(); ++i) {
    result += std::abs(val[i] - gt[i]);
  }
  return result / val.size();
}

template<typename T, typename T2>
double mae_selected(const std::vector<T>& val, const std::vector<T2>& gt,
                    const std::vector<int>& selected_queries) {
  assert(val.size() == gt.size());
  double result = 0.0;
  for (int i : selected_queries) {
    result += std::abs(val[i] - gt[i]);
  }
  return result / selected_queries.size();
}

template<typename T, typename T2>
double mre_selected(const std::vector<T>& val, const std::vector<T2>& gt,
                    const std::vector<int>& selected_queries) {
  double result = 0.0;
  assert(val.size() == gt.size());
  int cnt = 0;
  for (int i : selected_queries) {
    if (std::abs(gt[i]) > 1e-6) {
      result += std::abs(val[i] - gt[i]) / std::abs(gt[i]);
      cnt++;
    }
  }
  return result / cnt;
}

template<typename T, typename T2>
std::vector<double> mae_all(const std::vector<std::vector<T>>& val, const std::vector<std::vector<T2>>& gt,
                            const std::vector<int>& selected_queries) {
  assert(val.size() == gt.size());
  std::vector<double> result(val.size());
  for (size_t i = 0; i < val.size(); ++i) {
    result[i] = mae_selected(val[i], gt[i], selected_queries);
  }
  return result;
}

template<typename T, typename T2>
std::vector<double> mre_all(const std::vector<std::vector<T>>& val, const std::vector<std::vector<T2>>& gt,
const std::vector<int>& selected_queries) {
  assert(val.size() == gt.size());
  std::vector<double> result(val.size());
  for (size_t i = 0; i < val.size(); ++i) {
    result[i] = mre_selected(val[i], gt[i], selected_queries);
  }
  return result;
}

template<typename T, typename RT = T>
std::vector<RT> get_column(const std::vector<std::vector<T>>& matrix, int col) {
  std::vector<RT> result;
  for (const auto& row : matrix) {
    result.push_back(row[col]);
  }
  return result;
}

template<typename T>
std::vector<std::vector<T>> transpose(const std::vector<std::vector<T>>& matrix) {
  assert(matrix.size() > 0); // assume non-empty matrix
  std::vector<std::vector<T>> result(matrix[0].size(), std::vector<T>(matrix.size()));
  for (size_t i = 0; i < matrix.size(); ++i) {
    for (size_t j = 0; j < matrix[0].size(); ++j) {
      result[j][i] = matrix[i][j];
    }
  }
  return result;
}

} // namespace ONIAK

#endif