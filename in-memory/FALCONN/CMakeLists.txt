cmake_minimum_required(VERSION 3.0)

project(falconn)

include_directories(../Common)
set(CMAKE_CXX_STANDARD 20)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_FLAGS "-Wall")
set(CMAKE_CXX_FLAGS_DEBUG "-g -fsanitize=address")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
#add_library(lib)
#target_include_directories(lib INTERFACE external/eigen)
#target_include_directories(lib INTERFACE external/simple-serializer)
#target_include_directories(lib INTERFACE external/nlohmann)
#target_include_directories(lib INTERFACE external/wyhash)

include_directories(src/include)
include_directories(external/eigen)
include_directories(external/simple-serializer)
include_directories(external/nlohmann)
include_directories(external/wyhash)
include_directories(src/include/falconn/ffht)
include_directories(external/hbe)
include_directories(external)

add_subdirectory(src/include/falconn)
add_subdirectory(external/hbe)

add_definitions(-DDEBUG)
add_executable(${PROJECT_NAME} FalconnMain.cc)
target_link_libraries(${PROJECT_NAME} pthread kronecker_lsh)

add_executable(falconn_recall_table falconn_recall_table.cc)
# target_include_directories(falconn_recall_table PUBLIC ${BOOST_PATH})
add_executable(falconn_selectivity falconn_selectivity.cc)

add_executable(falconn_kde falconn_kde.cc)
add_executable(kde_gt kde_gt.cc)
add_executable(kde_sample kde_sample.cc)
add_executable(candidate_probs candidate_probs.cc)
add_executable(mp_probs mp_probs.cc)
add_executable(candidate_probs_fast candidate_probs_fast.cc)
add_executable(falconn_fair falconn_fair.cc)
add_executable(fair_nn fair_nn.cc)

add_executable(falconn_fair_mp falconn_fair_mp.cc)
add_executable(fair_nn_mp fair_nn_mp.cc)
find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    target_link_libraries(falconn_fair_mp PUBLIC OpenMP::OpenMP_CXX)
    target_link_libraries(fair_nn_mp PUBLIC OpenMP::OpenMP_CXX)
endif()


add_executable(falconn_fair_time falconn_fair_time.cc)
add_executable(falconn_fair_time_distance falconn_fair_time_distance.cc)
add_executable(fair_nn_time fair_nn_time.cc)
add_executable(recall_qh recall_qh.cc)
add_executable(recall_qh2 recall_qh2.cc)
add_executable(falconn_disthist_mle falconn_disthist_mle.cc)
add_executable(falconn_disthist_tblwise falconn_disthist_tblwise.cc)
add_executable(falconn_disthist_sketch falconn_disthist_sketch.cc)
add_executable(falconn_disthist_cuckoo falconn_disthist_cuckoo.cc)
add_executable(falconn_disthist_sample falconn_disthist_sample.cc)
add_executable(falconn_disthist_dleft falconn_disthist_dleft.cc)
add_executable(falconn_disthist_tbl2 falconn_disthist_tbl2.cc)
add_executable(falconn_disthist_tbl3 falconn_disthist_tbl3.cc)
add_executable(count_candidates count_candidates.cc)
add_executable(falconn_kde_tbl falconn_kde_tbl.cc)
add_executable(falconn_kde_v3 falconn_kde_v3.cc)
add_executable(qdde_gt qdde_gt.cc)

set(CMAKE_CXX_STANDARD 17)
add_executable(hbe hbe.cpp)
find_library(CONFIG4CPP_LIBRARY config4cpp HINTS external/hbe/lib/config4cpp/lib)
target_link_libraries(hbe data alg ${CONFIG4CPP_LIBRARY})
target_include_directories(hbe PUBLIC external/hbe/utils external/hbe/lib/config4cpp/include)

add_executable(hbe2 hbe2.cpp)
target_link_libraries(hbe2 data alg ${CONFIG4CPP_LIBRARY})
target_include_directories(hbe2 PUBLIC external/hbe/utils external/hbe/lib/config4cpp/include)

add_library(testl testl.cc testl.h)
add_executable(testt test.cc)
target_link_libraries(testt testl)